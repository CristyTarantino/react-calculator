{"version":3,"sources":["components/buttons/index.module.scss","components/calculator/index.tsx","components/output/index.tsx","components/output/index.module.scss","components/formula/index.tsx","components/formula/index.module.scss","components/buttons/index.tsx","components/calculator/index.module.scss","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","isOperator","endsWithOperator","endsWithNegativeSign","Calculator","useState","currentVal","setCurrentVal","prevVal","setPrevVal","formula","setFormula","evaluated","setEvaluated","maxDigitWarning","setTimeout","handleEvaluate","includes","expression","test","slice","replace","answer","Math","round","eval","toString","e","handleOperators","event","value","currentTarget","handleNumbers","length","handleDecimal","match","initialize","className","styles","calculator","currentValue","decimal","evaluate","numbers","operators","Output","outputScreen","id","Formula","formulaScreen","Buttons","jumbo","clearStyle","join","onClick","operatorStyle","equalsStyle","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4aad0e51.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"jumbo\":\"buttons_jumbo__3vkc2\",\"clearStyle\":\"buttons_clearStyle__3NQ30\",\"operatorStyle\":\"buttons_operatorStyle__UWHLx\",\"equalsStyle\":\"buttons_equalsStyle__AulIq\"};","import React, { useState } from \"react\";\nimport Output from \"../output\";\nimport Formula from \"../formula\";\nimport Buttons from \"../buttons\";\n\nimport styles from \"./index.module.scss\";\n\n// VARS:\nconst isOperator = /[x/+‑]/,\n  endsWithOperator = /[x+‑/]$/,\n  endsWithNegativeSign = /[x/+]‑$/;\n\nconst Calculator = () => {\n  const [currentVal, setCurrentVal] = useState(\"0\");\n  const [prevVal, setPrevVal] = useState(\"0\");\n  const [formula, setFormula] = useState(\"\");\n  const [evaluated, setEvaluated] = useState(false);\n\n  const maxDigitWarning = () => {\n    setCurrentVal(\"Digit Limit Met\");\n    setPrevVal(currentVal);\n    setTimeout(() => setCurrentVal(prevVal), 1000);\n  };\n\n  const handleEvaluate = () => {\n    if (!currentVal.includes(\"Limit\")) {\n      let expression = formula;\n      while (endsWithOperator.test(expression)) {\n        expression = expression.slice(0, -1);\n      }\n      expression = expression.replace(/x/g, \"*\").replace(/‑/g, \"-\");\n\n      try {\n        // eslint-disable-next-line\n        let answer =\n          Math.round(1000000000000 * eval(expression)) / 1000000000000;\n        setCurrentVal(answer.toString());\n        setFormula(\n          expression.replace(/\\*/g, \"⋅\").replace(/-/g, \"‑\") + \"=\" + answer\n        );\n        setPrevVal(answer.toString());\n        setEvaluated(true);\n      } catch (e) {}\n    }\n  };\n\n  const handleOperators = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ): void => {\n    if (!currentVal.includes(\"Limit\")) {\n      const value = event.currentTarget.value;\n      setCurrentVal(value);\n      setEvaluated(false);\n      if (evaluated) {\n        setFormula(prevVal + value);\n      } else if (!endsWithOperator.test(formula)) {\n        setPrevVal(formula);\n        setFormula(formula + value);\n      } else if (!endsWithNegativeSign.test(formula)) {\n        setFormula(\n          (endsWithNegativeSign.test(formula + value) ? formula : prevVal) +\n            value\n        );\n      } else if (value !== \"‑\") {\n        setFormula(prevVal + value);\n      }\n    }\n  };\n\n  const handleNumbers = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ): void => {\n    if (!currentVal.includes(\"Limit\")) {\n      const value = event.currentTarget.value;\n      setEvaluated(false);\n      if (currentVal.length > 21) {\n        maxDigitWarning();\n      } else if (evaluated) {\n        setCurrentVal(value);\n        setFormula(value !== \"0\" ? value : \"\");\n      } else {\n        setCurrentVal(\n          currentVal === \"0\" || isOperator.test(currentVal)\n            ? value\n            : currentVal + value\n        );\n        setFormula(\n          currentVal === \"0\" && value === \"0\"\n            ? formula === \"\"\n              ? value\n              : formula\n            : /([^.0-9]0|^0)$/.test(formula)\n            ? formula.slice(0, -1) + value\n            : formula + value\n        );\n      }\n    }\n  };\n\n  const handleDecimal = () => {\n    if (evaluated) {\n      setCurrentVal(\"0.\");\n      setFormula(\"0.\");\n      setEvaluated(false);\n    } else if (!currentVal.includes(\".\") && !currentVal.includes(\"Limit\")) {\n      setEvaluated(false);\n      if (currentVal.length > 21) {\n        maxDigitWarning();\n      } else if (\n        endsWithOperator.test(formula) ||\n        (currentVal === \"0\" && formula === \"\")\n      ) {\n        setCurrentVal(\"0.\");\n        setFormula(formula + \"0.\");\n      } else {\n        setCurrentVal(formula.match(/(-?\\d+\\.?\\d*)$/)![0] + \".\");\n        setFormula(formula + \".\");\n      }\n    }\n  };\n\n  const initialize = () => {\n    setCurrentVal(\"0\");\n    setPrevVal(\"0\");\n    setFormula(\"\");\n    setEvaluated(false);\n  };\n\n  return (\n    <div>\n      <div className={styles.calculator}>\n        <Formula formula={formula.replace(/x/g, \"⋅\")} />\n        <Output currentValue={currentVal} />\n        <Buttons\n          decimal={handleDecimal}\n          evaluate={handleEvaluate}\n          initialize={initialize}\n          numbers={handleNumbers}\n          operators={handleOperators}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Calculator;\n","import React from \"react\";\nimport styles from \"./index.module.scss\";\n\ninterface IOutput {\n  currentValue: string;\n}\n\nconst Output: React.FC<IOutput> = ({ currentValue }) => {\n  return (\n    <div className={styles.outputScreen} id=\"display\">\n      {currentValue}\n    </div>\n  );\n};\n\nexport default Output;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outputScreen\":\"output_outputScreen__3xbp1\"};","import React from \"react\";\nimport styles from \"./index.module.scss\";\n\ninterface IFormula {\n  formula: string;\n}\n\nconst Formula: React.FC<IFormula> = ({ formula }) => {\n  return <div className={styles.formulaScreen}>{formula}</div>;\n};\n\nexport default Formula;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formulaScreen\":\"formula_formulaScreen__9FGAd\"};","import React from \"react\";\nimport styles from \"./index.module.scss\";\n\ninterface IButtons {\n  initialize: () => void;\n  numbers: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  operators: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  decimal: () => void;\n  evaluate: () => void;\n}\n\nconst Buttons: React.FC<IButtons> = ({\n  initialize,\n  numbers,\n  operators,\n  decimal,\n  evaluate,\n}) => {\n  return (\n    <div>\n      <button\n        className={[styles.jumbo, styles.clearStyle].join(\" \")}\n        id=\"clear\"\n        onClick={initialize}\n        value=\"AC\"\n      >\n        AC\n      </button>\n      <button\n        id=\"divide\"\n        onClick={operators}\n        className={styles.operatorStyle}\n        value=\"/\"\n      >\n        /\n      </button>\n      <button\n        id=\"multiply\"\n        onClick={operators}\n        className={styles.operatorStyle}\n        value=\"x\"\n      >\n        x\n      </button>\n      <button id=\"seven\" onClick={numbers} value=\"7\">\n        7\n      </button>\n      <button id=\"eight\" onClick={numbers} value=\"8\">\n        8\n      </button>\n      <button id=\"nine\" onClick={numbers} value=\"9\">\n        9\n      </button>\n      <button\n        id=\"subtract\"\n        onClick={operators}\n        className={styles.operatorStyle}\n        value=\"‑\"\n      >\n        -\n      </button>\n      <button id=\"four\" onClick={numbers} value=\"4\">\n        4\n      </button>\n      <button id=\"five\" onClick={numbers} value=\"5\">\n        5\n      </button>\n      <button id=\"six\" onClick={numbers} value=\"6\">\n        6\n      </button>\n      <button\n        id=\"add\"\n        onClick={operators}\n        className={styles.operatorStyle}\n        value=\"+\"\n      >\n        +\n      </button>\n      <button id=\"one\" onClick={numbers} value=\"1\">\n        1\n      </button>\n      <button id=\"two\" onClick={numbers} value=\"2\">\n        2\n      </button>\n      <button id=\"three\" onClick={numbers} value=\"3\">\n        3\n      </button>\n      <button className={styles.jumbo} id=\"zero\" onClick={numbers} value=\"0\">\n        0\n      </button>\n      <button id=\"decimal\" onClick={decimal} value=\".\">\n        .\n      </button>\n      <button\n        id=\"equals\"\n        onClick={evaluate}\n        className={styles.equalsStyle}\n        value=\"=\"\n      >\n        =\n      </button>\n    </div>\n  );\n};\n\nexport default Buttons;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"calculator\":\"calculator_calculator__3iGMr\"};","import React from \"react\";\nimport \"./App.scss\";\nimport Calculator from \"./components/calculator\";\n\nfunction App() {\n  return <Calculator />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}